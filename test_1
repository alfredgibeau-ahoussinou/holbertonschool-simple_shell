#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_COMMAND_LENGTH 100

void display_prompt() {
    printf("#cisfun$ ");
    fflush(stdout);
}

int execute_command(char *command) {
    pid_t pid, wpid;
    int status;

    pid = fork();
    if (pid == 0) {
        // Child process
        if (execlp(command, command, (char *)NULL) == -1) {
            perror("simple_shell");
        }
        exit(EXIT_FAILURE);
    } else if (pid < 0) {
        // Forking error
        perror("simple_shell");
    } else {
        // Parent process
        do {
            wpid = waitpid(pid, &status, WUNTRACED);
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));

        return 1;
    }

    return 0;
}

int main() {
    char command[MAX_COMMAND_LENGTH];

    while (1) {
        display_prompt();

        if (fgets(command, MAX_COMMAND_LENGTH, stdin) == NULL) {
            // Handle end of file (Ctrl+D)
            printf("\nExiting shell.\n");
            break;
        }

        // Remove newline character
        command[strcspn(command, "\n")] = '\0';

        if (execute_command(command) == 0) {
            // Command not found or execution failed
            printf("./shell: No such file or directory\n");
        }
    }

    return 0;
}
